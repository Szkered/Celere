{"/tmp/geth-compile-solidity987207236:PaymentAgent":{"code":"0x6060604052341561000c57fe5b5b60028054600160a060020a03191633600160a060020a031617905560016000555b5b61053c8061003e6000396000f3006060604052361561008b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632ae6a3b2811461008d5780633a4ef544146100b257806350cdb4b1146100d4578063a6f9dae1146100ef578063b721e1181461010d578063be6554dc1461010d578063fb6cb61f1461013d578063ff88b6a61461016c575bfe5b341561009557fe5b6100a060043561018d565b60408051918252519081900360200190f35b34156100ba57fe5b6100a0610217565b60408051918252519081900360200190f35b34156100dc57fe5b6100ed60043560243560443561021d565b005b34156100f757fe5b6100ed600160a060020a0360043516610332565b005b341561011557fe5b6100ed60043560243561037b565b005b341561011557fe5b6100ed60043560243561037b565b005b341561014557fe5b61015060043561049f565b60408051600160a060020a039092168252519081900360200190f35b341561017457fe5b6100ed600435600160a060020a03602435166104ba565b005b6000818152600160209081526040808320548151830184905281517f12065fe00000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169283926312065fe0926004808301939282900301818887803b15156101f957fe5b6102c65a03f1151561020757fe5b5050604051519250505b50919050565b60005481565b6000838152600160205260408082205484835281832054835483517fb7502bc10000000000000000000000000000000000000000000000000000000081526004810187905260248101919091529251600160a060020a03928316949290911692849263b7502bc19260448084019382900301818387803b151561029c57fe5b6102c65a03f115156102aa57fe5b505060008054600181018255604080517fddd20b8800000000000000000000000000000000000000000000000000000000815260048101889052602481019290925251600160a060020a038516935063ddd20b889260448084019391929182900301818387803b151561031957fe5b6102c65a03f1151561032757fe5b5050505b5050505050565b60025433600160a060020a0390811691161461034e5760006000fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000828152600160208190526040808320548354928301845581517fddd20b880000000000000000000000000000000000000000000000000000000081526004810186905260248101939093529051600160a060020a0390911692839263ddd20b88926044808301939282900301818387803b15156103f657fe5b6102c65a03f1151561040457fe5b5050505b505050565b6000828152600160208190526040808320548354928301845581517fddd20b880000000000000000000000000000000000000000000000000000000081526004810186905260248101939093529051600160a060020a0390911692839263ddd20b88926044808301939282900301818387803b15156103f657fe5b6102c65a03f1151561040457fe5b5050505b505050565b600160205260009081526040902054600160a060020a031681565b60025433600160a060020a039081169116146104d65760006000fd5b6000828152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50505600a165627a7a72305820f60f02d012fb8be94bbf12aa29bc736593c04e98f020170ac164eb8243e7daff0029","info":{"source":"pragma solidity ^0.4.2;\n\n\ncontract Stash {\n    bytes32 public bankName;\n    int public balance;\n\n    event BalanceChanged(int amount, uint txID);\n\n    function Stash(bytes32 _bankName, int _balance) {\n\tbankName = _bankName;\n\tbalance = _balance;\n    }\n\n    function credit(int _crAmt, uint txnId)  {\n\tbalance += _crAmt;\n\tBalanceChanged(_crAmt, txnId);\n    }\n\n    function debit(int _dAmt, uint txnId)  {\n\t/* if (_dAmt > balance) {throw;} */\n\tbalance -= _dAmt;\n\tBalanceChanged(_dAmt, txnId);\n    }\n\n    function getBalance() constant returns (int) {\n    \treturn balance;\n    }\n}\n\ncontract PaymentAgent {\n    uint public txNum;\n    mapping (bytes32 => address) public stashRegistry;\n    \n    address owner;\n    modifier onlyowner() { if (msg.sender != owner) throw; _; }\n\n    function PaymentAgent() {\n\towner = msg.sender;\n\ttxNum = 1;\n    }\n\n    function changeOwner(address newOwner) onlyowner {\n\towner = newOwner;\n    }\n\n    function registerStash(bytes32 _bankName, address addr) onlyowner {\n\tstashRegistry[_bankName] = addr;\n    }\n\n    function transfer(bytes32 _src, bytes32 _dest, int amount) {\n    \tStash src = Stash(stashRegistry[_src]);\n\tStash dest = Stash(stashRegistry[_dest]);\n\tsrc.debit(amount, txNum);\n\tdest.credit(amount, txNum++);\n    }\n\n    function getStash(bytes32 _bankName) constant returns (int) {\n\tStash stash = Stash(stashRegistry[_bankName]);\n\treturn stash.getBalance();\n    }\n\n    function pledge(bytes32 _bankName, int amount) {\n\tStash stash = Stash(stashRegistry[_bankName]);\n\tstash.credit(amount, txNum++);\n    }\n\n    function redeem(bytes32 _bankName, int amount) {\n\tStash stash = Stash(stashRegistry[_bankName]);\n\tstash.credit(amount, txNum++);\n    }\n}\n","language":"Solidity","languageVersion":"0.4.11","compilerVersion":"0.4.11","compilerOptions":"--combined-json bin,abi,userdoc,devdoc --add-std --optimize","abiDefinition":[{"constant":true,"inputs":[{"name":"_bankName","type":"bytes32"}],"name":"getStash","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"txNum","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_src","type":"bytes32"},{"name":"_dest","type":"bytes32"},{"name":"amount","type":"int256"}],"name":"transfer","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_bankName","type":"bytes32"},{"name":"amount","type":"int256"}],"name":"pledge","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_bankName","type":"bytes32"},{"name":"amount","type":"int256"}],"name":"redeem","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"stashRegistry","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_bankName","type":"bytes32"},{"name":"addr","type":"address"}],"name":"registerStash","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}},"/tmp/geth-compile-solidity987207236:Stash":{"code":"0x6060604052341561000c57fe5b60405160408061020e8339810160405280516020909101515b600082905560018190555b50505b6101cc806100426000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe0811461006657806327d3580114610088578063b69ef8a8146100aa578063b7502bc1146100cc578063ddd20b88146100e4575bfe5b341561006e57fe5b6100766100fc565b60408051918252519081900360200190f35b341561009057fe5b610076610103565b60408051918252519081900360200190f35b34156100b257fe5b610076610109565b60408051918252519081900360200190f35b34156100d457fe5b6100e260043560243561010f565b005b34156100ec57fe5b6100e2600435602435610158565b005b6001545b90565b60005481565b60015481565b600180548390039055604080518381526020810183905281517f9a7b939a56827d05c5b46561f0151a56d475694ad8ced4ac388c9bb1121322d8929181900390910190a15b5050565b6001805483019055604080518381526020810183905281517f9a7b939a56827d05c5b46561f0151a56d475694ad8ced4ac388c9bb1121322d8929181900390910190a15b50505600a165627a7a72305820d7b7b6f8c054cd5a115e71d3604eb8f6860bb74ca20f972df1521e22515445cd0029","info":{"source":"pragma solidity ^0.4.2;\n\n\ncontract Stash {\n    bytes32 public bankName;\n    int public balance;\n\n    event BalanceChanged(int amount, uint txID);\n\n    function Stash(bytes32 _bankName, int _balance) {\n\tbankName = _bankName;\n\tbalance = _balance;\n    }\n\n    function credit(int _crAmt, uint txnId)  {\n\tbalance += _crAmt;\n\tBalanceChanged(_crAmt, txnId);\n    }\n\n    function debit(int _dAmt, uint txnId)  {\n\t/* if (_dAmt > balance) {throw;} */\n\tbalance -= _dAmt;\n\tBalanceChanged(_dAmt, txnId);\n    }\n\n    function getBalance() constant returns (int) {\n    \treturn balance;\n    }\n}\n\ncontract PaymentAgent {\n    uint public txNum;\n    mapping (bytes32 => address) public stashRegistry;\n    \n    address owner;\n    modifier onlyowner() { if (msg.sender != owner) throw; _; }\n\n    function PaymentAgent() {\n\towner = msg.sender;\n\ttxNum = 1;\n    }\n\n    function changeOwner(address newOwner) onlyowner {\n\towner = newOwner;\n    }\n\n    function registerStash(bytes32 _bankName, address addr) onlyowner {\n\tstashRegistry[_bankName] = addr;\n    }\n\n    function transfer(bytes32 _src, bytes32 _dest, int amount) {\n    \tStash src = Stash(stashRegistry[_src]);\n\tStash dest = Stash(stashRegistry[_dest]);\n\tsrc.debit(amount, txNum);\n\tdest.credit(amount, txNum++);\n    }\n\n    function getStash(bytes32 _bankName) constant returns (int) {\n\tStash stash = Stash(stashRegistry[_bankName]);\n\treturn stash.getBalance();\n    }\n\n    function pledge(bytes32 _bankName, int amount) {\n\tStash stash = Stash(stashRegistry[_bankName]);\n\tstash.credit(amount, txNum++);\n    }\n\n    function redeem(bytes32 _bankName, int amount) {\n\tStash stash = Stash(stashRegistry[_bankName]);\n\tstash.credit(amount, txNum++);\n    }\n}\n","language":"Solidity","languageVersion":"0.4.11","compilerVersion":"0.4.11","compilerOptions":"--combined-json bin,abi,userdoc,devdoc --add-std --optimize","abiDefinition":[{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"bankName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"balance","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_dAmt","type":"int256"},{"name":"txnId","type":"uint256"}],"name":"debit","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_crAmt","type":"int256"},{"name":"txnId","type":"uint256"}],"name":"credit","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_bankName","type":"bytes32"},{"name":"_balance","type":"int256"}],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"int256"},{"indexed":false,"name":"txID","type":"uint256"}],"name":"BalanceChanged","type":"event"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}